initialize() {

		defineConstant("N",1e4); // population size
		defineConstant("u",2e-6); // mutation rate
		defineGlobal("sub_traits",0); // trait contributions from fixed mutations, starts at 0

		initializeMutationRate(u);

		// QTL (type 1)
		initializeMutationType("m1",0.5, "f", 0.0);  // QTL, we define selection coefficients as effect sizes in the mutation callback
		initializeGenomicElementType("g1",m1,1.0);

		// neutral demographic reference (type 2)
		initializeMutationType("m2", 0.5, "f", 0.0);  // neut reference
		initializeGenomicElementType("g2",m2,1.0);

		// set up our chromosome regions
	  defineConstant("n_QTL", 4000); // number of QTLs
	  defineConstant("n_neutral_loci", 1000); // number of neutral bp with free recombination

		initializeGenomicElement(g1,0,n_QTL-1);
		initializeGenomicElement(g2,n_QTL,n_QTL+n_neutral_loci-1);

		initializeRecombinationRate(0.5);

		m1.convertToSubstitution = T;
		m1.mutationStackPolicy = "f";
		m2.mutationStackPolicy = "f";

	// set up covariance in mutation effects between populations
	defineConstant("mu", c(0, 0, 0)); //mean of mutation distribution in ancestral and 2 descendant populations
	defineConstant("cov", sd_a^2 * corr); //covariance between mutational effects in the pair of populations
	defineConstant("sigma", matrix(c(sd_a^2,cov,cov,
																	 cov, sd_a^2, cov,
																	  cov, cov, sd_a^2), nrow=3, byrow=T)); // covariance matrix of newly sampled effects

}
// assign effect sizes of mutation in each population
mutation(m1) {
	// draw mutational effects for the new m1 mutation
	effects = rmvnorm(1, mu, sigma);
	mut.setValue("a", effects);
	mut.setSelectionCoeff(effects[0]);
	return T;
}

fitness(m1) {
	// Make the QTL effects neutral --
	// the assigned selection coefficients are actually how we track their effect sizes
	// and we calculate fitness based on an individual's total phenotype each generation
	// by changing the fitnessScaling attribute
	return 1.0;
}

1 early() {
	sim.addSubpop("p1", N);
}

// calculate fitness for each individual; it is faster do update fitness scaling than to have a fitness callback
1: late(){
	sim.subpopulations.individuals.fitnessScaling = exp(-((sim.subpopulations.individuals.sumOfMutationsOfType(m1) + sub_traits +2*sum(sim.substitutions.selectionCoeff))^2) / (2*(w^2))) ;
}

// output data at end of simulation -- needed to continue the simulation
40000 late() {
	// save the state of the simulation
	sim.outputFull(output_burn_file,binary=T);

	// output the substitution info to a file
	if(length(which(sim.substitutions.mutationType==m1))){
		sub_effects_matrix = sapply(sim.substitutions, "applyValue.getValue('a');", simplify="matrix"); // each row refers to a population, each column refers to a substitution, each element is an effect
		defineGlobal("sub_traits",sub_traits + 2*apply(sub_effects_matrix, 0, "sum(applyValue);")); // total phenotypic contribution of substitution to each trait
		if(!writeFile(output_sub_file, paste(sub_traits,sep=",") )){stop("Error writing substitutions file.");}
	} else {
		if(!writeFile(output_sub_file, "0,0,0" )){stop("Error writing substitutions file.");}
	}

	// output the values of mutations to a file
	for(mut in sim.mutationsOfType(m1)){
		writeFile(output_effects_file, paste(c(mut.id,paste(mut.getValue('a'),sep=',')),sep=','), append=T);
	}

	// end simulation
	sim.simulationFinished();
}
