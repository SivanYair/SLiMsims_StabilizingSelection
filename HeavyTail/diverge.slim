initialize() {

		defineConstant("N",1e4); // population size
		defineConstant("u",2e-6); // mutation rate

		initializeMutationRate(u);

		// QTL (type 1)
		initializeMutationType("m1", 0.5, "f", 0.0);  // QTL, we define selection coefficients as effect sizes in the mutation callback
		initializeGenomicElementType("g1",m1,1.0);

		// m1 mutation parameters
		// define mu, sd, and probabilities of the 3 distributions
		defineConstant("heavy_mu",0.25);
		defineConstant("heavy_sd",0.05);
		defineConstant("heavy_prob",0.175);
		defineConstant("mu",c(0,heavy_mu,-heavy_mu));
		defineConstant("dev", c(0.05, heavy_sd, heavy_sd));
		defineConstant("probs",c(1-2*heavy_prob,heavy_prob,heavy_prob));

		// neutral demographic reference (type 2)
		initializeMutationType("m2", 0.5, "f", 0.0);  // neut reference
		initializeGenomicElementType("g2",m2,1.0);

		// set up our chromosome regions
	  defineConstant("n_QTL", 4000); // number of QTLs
	  defineConstant("n_neutral_loci", 1000); // number of neutral bp with free recombination

		initializeGenomicElement(g1,0,n_QTL-1);
		initializeGenomicElement(g2,n_QTL,n_QTL+n_neutral_loci-1);

		initializeRecombinationRate(0.5);

		m1.convertToSubstitution = T;
		m1.mutationStackPolicy = "f";
		m2.mutationStackPolicy = "f";
}
mutation(m1) {
	// draw mutation effect size from mixture of 3 gaussians
	dist=sample(x=c(0,1,2),size=1,weights=probs);
	mut.setSelectionCoeff(rnorm(1,mu[dist],dev[dist]));
	return T; // proceed with creating the proposed mutation
}

fitness(m1) {
	// Make the QTL effects neutral --
	// the assigned selection coefficients are actually how we track their effect sizes
	// and we calculate fitness based on an individual's total phenotype each generation
	// by changing the fitnessScaling attribute
	return 1.0;
}

// load in population file, then decide which future script blocks to run based on the generation
1 late() {
  sim.readFromPopulationFile(input_diverge_file);

	// make it generation 1
	sim.generation=1;

	// read the substitution info from a file
	defineConstant("sub_trait_base", asFloat(readFile(input_sub_file)));

	// each run is 3500 generations; generations to record output in this run:
	record_gens = c(sim.generation + seq(100,400,by=100),sim.generation + seq(500,3500,by=500));

	// use the s1 block as a template to run in all generations of interest
	for (gen in record_gens){
		sim.registerLateEvent(NULL, s1.source, gen, gen);
	}

	// deregister the s1 block
	sim.deregisterScriptBlock(s1);

	// use the s2 block to save the state of the simulation for the next run
	final_gen = record_gens[length(record_gens)-1];
	sim.registerLateEvent(NULL, s2.source, final_gen, final_gen);
	sim.deregisterScriptBlock(s2);

	// use the s3 block to calculate fitness each generation
	sim.registerLateEvent(NULL, s3.source, sim.generation+1, final_gen);
	sim.deregisterScriptBlock(s3);

	// use the s4 block to save the state of the simulation for potential directional selection simulations
	for (gen in c(501,1501,2001,2501)){
		sim.registerLateEvent(NULL, s4.source, gen, gen);
	}
	sim.deregisterScriptBlock(s4);

	// record mutation data at start of divergence (common ancestor)
	header = "generation,mut_type,mut_ID,position,effect_size,freq";
	if (!writeFile(mut_track_file, header)){stop("Error writing file.");}
	for(mut in sim.mutations){
		if (!writeFile(mut_track_file, paste(c(sim.generation,mut.mutationType.id,mut.id,mut.position,mut.selectionCoeff,sim.mutationFrequencies(p1,mut)),sep=','), append=T)){stop("Error writing file.");}
	}	

	// calculate fitness for this gen
	sim.subpopulations.individuals.fitnessScaling = exp(-((sim.subpopulations.individuals.sumOfMutationsOfType(m1) + sub_trait_base+2*sum(sim.substitutions.selectionCoeff))^2) / (2*(w^2))) ;

}

// record mutation data
s1 500 late() {
	for(mut in sim.mutations){
		writeFile(mut_track_file, paste(c(sim.generation,mut.mutationType.id,mut.id,mut.position,mut.selectionCoeff,sim.mutationFrequencies(p1,mut)),sep=','), append=T);
	}
}

// output data at end of simulation
s2 500 late() {
	// save the state of the simulation
	sim.outputFull(output_diverge_file,binary=T);

	// output the substitution info to a file
	if(!writeFile(output_sub_file, asString(sub_trait_base+2*sum(sim.substitutions.selectionCoeff)) )){stop("Error writing substitutions file.");}

	// output the sd of phenotypes to a file
	phenotypes=sim.subpopulations.individuals.sumOfMutationsOfType(m1) + sub_trait_base + 2*sum(sim.substitutions.selectionCoeff);
	if(!writeFile(pheno_sd_file, asString(sd(phenotypes)*sqrt((N-1)/(N))) )){stop("Error writing phenotype sd file.");}

	// end simulation
	sim.simulationFinished();
}

// calculate fitness for each individual; it is faster do update fitness scaling than to have a fitness callback
s3 500 late(){
	sim.subpopulations.individuals.fitnessScaling = exp(-((sim.subpopulations.individuals.sumOfMutationsOfType(m1) + sub_trait_base+2*sum(sim.substitutions.selectionCoeff))^2) / (2*(w^2))) ;
}

//output data at intermediate generations in case we use it for directional selection
s4 500 late() {
	// modify the output files to use the correct generation
	diverge_file=strsplit(output_diverge_file,"_");
	diverge_file[5]="gen"+(sim.generation-1);
	diverge_file=paste(diverge_file,sep="_");

	sub_file=strsplit(output_sub_file,"_");
	sub_file[6]="gen"+(sim.generation-1);
	sub_file=paste(sub_file,sep="_");

	sd_file=strsplit(pheno_sd_file,"_");
	sd_file[5]="gen"+(sim.generation-1);
	sd_file=paste(sd_file,sep="_");

	// save the state of the simulation
	sim.outputFull(diverge_file,binary=T);

	// output the substitution info to a file
	if(!writeFile(sub_file, asString(sub_trait_base+2*sum(sim.substitutions.selectionCoeff)) )){stop("Error writing substitutions file.");}

	// output the sd of phenotypes to a file
	phenotypes=sim.subpopulations.individuals.sumOfMutationsOfType(m1) + sub_trait_base + 2*sum(sim.substitutions.selectionCoeff);
	if(!writeFile(sd_file, asString(sd(phenotypes)*sqrt((N-1)/(N))) )){stop("Error writing phenotype sd file.");}
}

