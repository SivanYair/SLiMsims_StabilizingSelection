import numpy as np

# file Storage
storage="insert/"

# script locations
home="insert/"

selection_strengths=[4,5,7] # w
start_rep=1 # first rep to run
tot_runs=100 # total number of runs

divergence_numReps=10 # number of divergence reps per shared burn
divergence_runs=np.arange(divergence_numReps)+start_rep

burn_numReps=round(tot_runs/divergence_numReps) #number of burn reps
burn_runs=np.arange(burn_numReps)+start_rep

diverge_simstate_gens=[500,1500,2000,2500, diverge_numGen] # generations to save sim info, in case we want to start dir sel from there

# populations, when they diverge
pops=["A","B"]

# SHARED BURN
# sim state
heavytail_burn_simstate_file_pattern=storage+"HeavyTail/burn_output/simstates/w{omega}_burnRun{burn_run}.txt"
# trait value from substitutions
heavytail_burn_sub_file_pattern=storage+"HeavyTail/burn_output/sub_traits/w{omega}_burnRun{burn_run}.txt"
# log file
heavytail_burn_log_pattern=storage+"HeavyTail/burn_output/logs/w{omega}_burnRun{burn_run}.log"


# UNSHARED BURN
# sim state
heavytail_divburn_simstate_file_pattern=storage+"HeavyTail/divburn_output/simstates/w{omega}_burnRun{burn_run}_divRun{div_run}.txt"
# trait value from substitutions
heavytail_divburn_sub_file_pattern=storage+"HeavyTail/divburn_output/sub_traits/w{omega}_burnRun{burn_run}_divRun{div_run}.txt"
# log file
heavytail_divburn_log_pattern=storage+"HeavyTail/divburn_output/logs/w{omega}_burnRun{burn_run}_divRun{div_run}.log"


# DIVERGENCE
# csv of relevant mutation info for processing
heavytail_divergence_mut_tracking_file_pattern=storage+"HeavyTail/divergence_output/mut_track/w{omega}_burnRun{burn_run}_divRun{div_run}_pop{p}.txt"
# trait value from substitutions
heavytail_divergence_sub_file_pattern=storage+"HeavyTail/divergence_output/sub_traits/w{omega}_burnRun{burn_run}_divRun{div_run}_gen{g}_pop{p}.txt"
# log file
heavytail_divergence_log_pattern=storage+"HeavyTail/divergence_output/logs/w{omega}_burnRun{burn_run}_divRun{div_run}_pop{p}.log"
# phenotype sd files
heavytail_phenoSD_file_pattern=storage+"HeavyTail/divergence_output/phenoSD/w{omega}_burnRun{burn_run}_divRun{div_run}_gen{g}_pop{p}.txt"
# simstates to be used in iteration and by DirSel
heavytail_simState_file_pattern=storage+"HeavyTail/divergence_output/simstates/w{omega}_burnRun{burn_run}_divRun{div_run}_gen{g}_pop{p}.txt"
final_heavytail_simState_files=expand(heavytail_simState_file_pattern,omega=selection_strengths,burn_run=burn_runs,div_run=divergence_runs,g=diverge_simstate_gens,p=pops) # CHANGE TO GENERATIONS WE OUTPUT

########################### PREPPED DATA ######################
subdirectories = ["Qst_Fst", "prediction_accuracy", "mean_scores"] # Types of info we want
prepped_data_pattern = storage+"Prepped_Data/{data_cat}/HeavyTail.RDS"
prepped_data_files = expand(prepped_data_pattern,data_cat=subdirectories)

rule all:
    input:
        prepped_data_files

#### PREPPING DATA FOR ANALYSIS ####

rule prep_data:
    input: final_heavytail_simState_files, home+"Analysis_Prep/HeavyTail_prep_{data_cat}.R"
    output: prepped_data_pattern
    params: runtime="03:00:00" # format HH:MM:SS
    shell: "cd "+home+"Analysis_Prep; Rscript --vanilla HeavyTail_prep_{wildcards.data_cat}.R"


### BASIC ###
rule heavytail_shared_burn:
    input:
        home+"HeavyTail/shared_burn.slim",
        home+"HeavyTail/shared_burn.txt",
    output:
        burn=heavytail_burn_simstate_file_pattern,
        sub=heavytail_burn_sub_file_pattern
    params:
        burn_log=heavytail_burn_log_pattern,
        runtime="48:00:00" # format HH:MM:SS
    shell:
        "cd "+home+"HeavyTail ;"
        "./run_start_burn.txt {wildcards.omega} {output.burn} {params.burn_log} {output.sub}"

rule heavytail_unshared_burn:
    input:
        home+"HeavyTail/unshared_burn.slim",
        simstate=heavytail_burn_simstate_file_pattern,
        sub=heavytail_burn_sub_file_pattern
    output:
        simstate=heavytail_divburn_simstate_file_pattern,
        sub=heavytail_divburn_sub_file_pattern
    params:
        div_log=heavytail_divburn_log_pattern,
        runtime="24:00:00" # format HH:MM:SS
    shell:
        "cd "+home+"HeavyTail ;"
        "./run_start_diverge_burn.txt {wildcards.omega} {input.simstate} {output.simstate} {params.div_log} {input.sub} {output.sub}"

rule heavytail_diverge:
    input:
        home+"HeavyTail/diverge.slim",
        home+"HeavyTail/run_diverge.txt",
        simstate=heavytail_divburn_simstate_file_pattern,
        sub=heavytail_divburn_sub_file_pattern
    output: # don't need to name files; these list output for all generations, the params section lists output for last generation of each category
        expand(heavytail_divergence_sub_file_pattern,g=diverge_simstate_gens, allow_missing=True),
        expand(heavytail_simState_file_pattern,g=diverge_simstate_gens, allow_missing=True),
        expand(heavytail_phenoSD_file_pattern,g=diverge_simstate_gens, allow_missing=True)
    params:
        div_log=heavytail_divergence_log_pattern,
        mut_track=heavytail_divergence_mut_tracking_file_pattern,
        runtime="06:00:00", # format HH:MM:SS
        phenoSD_last=expand(heavytail_phenoSD_file_pattern,g=diverge_numGen, allow_missing=True),
        sub_last=expand(heavytail_divergence_sub_file_pattern,g=diverge_numGen, allow_missing=True),
        simstate_last=expand(heavytail_simState_file_pattern,g=diverge_numGen, allow_missing=True)
    shell:
        "cd "+home+"HeavyTail ;"
        "./run_diverge.txt {wildcards.omega} {input.simstate} {params.simstate_last} {params.div_log} {params.mut_track} {input.sub} {params.sub_last} {params.phenoSD_last}"
