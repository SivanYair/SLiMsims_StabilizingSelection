initialize() {

		defineConstant("N",1e4); // population size
		defineConstant("u",2e-6); // mutation rate
		defineGlobal("sub_traits",0); // trait contributions from fixed mutations, starts at 0

		initializeMutationRate(u);

		// QTL (type 1)
		initializeMutationType("m1",0.5, "f", 0.0);  // QTL, we define selection coefficients as effect sizes in the mutation callback
		initializeGenomicElementType("g1",m1,1.0);

		// neutral demographic reference (type 2)
		initializeMutationType("m2", 0.5, "f", 0.0);  // neut reference
		initializeGenomicElementType("g2",m2,1.0);

		// set up our chromosome regions
	  defineConstant("n_QTL", 4000); // number of QTLs
	  defineConstant("n_neutral_loci", 1000); // number of neutral bp with free recombination

		initializeGenomicElement(g1,0,n_QTL-1);
		initializeGenomicElement(g2,n_QTL,n_QTL+n_neutral_loci-1);

		initializeRecombinationRate(0.5);

		m1.convertToSubstitution = T;
		m1.mutationStackPolicy = "f";
		m2.mutationStackPolicy = "f";


}
mutation(m1) {
	// draw mutational effects for the new m1 mutation
	// we want to track effect on trait 1, and just care about effect on other traits for the sel coef
	trait_effects = rnorm(n,0,sd_a); // sample effect a_i for all n traits
	mut.setValue("all_a",trait_effects); // record effects on all traits
	s = sum(sapply(trait_effects,"applyValue^2;")) / (n*w^2) ;
	mut.setSelectionCoeff(s); // selection coefficient will not actually be used, but using this to store what it would be

	return T; // proceed with creating the proposed mutation
}
fitness(m1) {
	// Make the QTL effects neutral --
	// the assigned selection coefficients are actually how we track their effect sizes
	// and we calculate fitness based on an individual's total phenotype each generation
	// by changing the fitnessScaling attribute
	return 1.0;
}

1 early() {
	sim.addSubpop("p1", N);
}

// calculate fitness for each individual; it is faster do update fitness scaling than to have a fitness callback
1: late(){
	// baseline phenotypes from substitutions
	new_subs_index=which(sim.substitutions.mutationType==m1 & sim.substitutions.fixationGeneration==(sim.generation-1));
	if(length(new_subs_index))
	{
		sub_effects_matrix = sapply(sim.substitutions[new_subs_index], "applyValue.getValue('all_a');", simplify="matrix"); // each row refers to a trait, each column refers to a substitution, each element is an effect
		defineGlobal("sub_traits",sub_traits + 2*apply(sub_effects_matrix, 0, "sum(applyValue);")); // total phenotypic contribution of substitution to each trait
	}


	// loop through individuals with mutations to calculate fitness one by one, based on their mutations
	inds = sim.subpopulations.individuals[sim.subpopulations.individuals.countOfMutationsOfType(m1)>0];

	// if there are individuals with mutations, change their fitness
	if(inds.size()){
		inds.fitnessScaling = sapply(inds,"exp(-sum(sapply(apply(sapply(applyValue.genomes.mutationsOfType(m1),'applyValue.getValue(\"all_a\");',simplify='matrix'), 0, 'sum(applyValue);') + sub_traits,'applyValue^2;'))/(2*n*(w^2)));" );

		// broken down version of above:
		// fitnesses = sapply(inds, "muts = applyValue.genomes.mutationsOfType(m1);"+
		// 													"effects_matrix=sapply(muts,'applyValue.getValue(\"all_a\");',simplify='matrix');"	+
		// 													"phenos=apply(effects_matrix, 0, 'sum(applyValue);') + sub_traits;"+
		// 													"tot_dist=sum(sapply(phenos,'applyValue^2;'));" +
		// 													"exp(-tot_dist/(2*n*(w^2)));"
		// 													);
	}


}

// output data at end of simulation -- needed to continue the simulation
40000 late() {
	// save the state of the simulation
	sim.outputFull(output_burn_file,binary=T);

	// output the substitution info to a file
	if(!writeFile(output_sub_file, paste(sub_traits,sep=",") )){stop("Error writing substitutions file.");}

	// output the values of mutations to a file
	mut_lines = paste0(sapply(sim.mutationsOfType(m1),"paste0(paste(c(applyValue.id,applyValue.selectionCoeff,paste(applyValue.getValue('all_a'),sep=',')),sep=','),'\\n');"));
	if(!writeFile(output_effects_file, mut_lines)){stop("Error writing effects file.");}

	// end simulation
	sim.simulationFinished();
}
